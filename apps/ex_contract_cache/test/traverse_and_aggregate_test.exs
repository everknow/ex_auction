defmodule ExContractCacheTest do
  use ExUnit.Case

  def inc(t) do
    IO.inspect(t, label: "------")

    t
    |> String.to_integer()
    |> (&(&1 + 1)).()
    |> to_string()
  end

  test "store" do
    last_id = "1"
    # Need to zip since I need the full row to write in redis
    cached_addresses = []
    cached_hashes = []
    cached_prices = []

    cached_page = [cached_addresses, cached_hashes, cached_prices, "0"]
    addresses = ["1"]
    hashes = ["hash_1"]
    prices = ["1"]

    assert {"2", [[addresses], [hashes], [prices]]} =
             Enum.zip([addresses, hashes, prices])
             # Reduce all the valid rows into the updated cache pages
             |> Enum.reduce({last_id, cached_page}, fn {address, hash, price},
                                                       {last_index, acc} = bb ->
               new_index =
                 if hash != String.duplicate("0", 64) do
                   {
                     inc(last_index),
                     [
                       cached_addresses ++ [address],
                       cached_hashes ++ [hash],
                       cached_prices ++ [price]
                     ]
                   }
                 else
                   {
                     acc,
                     [
                       cached_addresses,
                       cached_hashes,
                       cached_prices
                     ]
                   }
                 end
             end)
  end

  test "aggregate" do
    %{"ok" => page} =
      Jason.decode!(
        "{\"ok\":[[\"0xa92a9268b82c3cc37e4a38d7355d35cf7a442bf8\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xa92a9268b82c3cc37e4a38d7355d35cf7a442bf8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0x42505aea1fd06aeb289058abb8c05a6539909822\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0xb630f90d5a0df24ed4a44b5ca4980334f2e34ff8\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000\"],[\"e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38\",\"e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38\",\"e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38\",\"e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38\",\"e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5\",\"e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa}"
      )

    assert [
             %{
               availableEditions: 4,
               hash: "e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38",
               totalEditions: 5
             },
             %{
               availableEditions: 7,
               hash: "1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1",
               totalEditions: 7
             },
             %{
               availableEditions: 10,
               hash: "69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931",
               totalEditions: 10
             },
             %{
               availableEditions: 8,
               hash: "e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5",
               totalEditions: 8
             }
           ] = result = ExContractCache.TraverseAndAggregate.aggregate([], page)

    # New aggregation
    page = [
      ["1"],
      ["e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38"],
      ["11"],
      "32"
    ]

    # to make the assertion the order is important, we should compare sorted
    # lists
    assert [
             %{
               availableEditions: 7,
               hash: "1007a21f76fb695cda27b770ce7e52dcd937c62053c3d8eb722a83e83d1906d1",
               totalEditions: 7
             },
             %{
               availableEditions: 10,
               hash: "69d1db68e3b24f9d7b8959dbb57d1581156d4e5c23e10f046590b488a44bd931",
               totalEditions: 10
             },
             %{
               availableEditions: 8,
               hash: "e7fda1191610e2e281f47a0858563772eabf9435c5091eb90ba413c39ef65aa5",
               totalEditions: 8
             },
             %{
               availableEditions: 5,
               hash: "e938b03d59841fe44413c25b0d4d56cac4ae0d7d39fbe928af3b55096d5f4f38",
               totalEditions: 6
             }
           ] = ExContractCache.TraverseAndAggregate.aggregate(result, page)
  end
end
